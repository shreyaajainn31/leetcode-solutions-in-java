Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

Question link: https://leetcode.com/problems/find-all-anagrams-in-a-string/
==========================================================================

class Solution {
    
    public String sortString(String str){
        
         char mainArray[] = str.toCharArray();
        
        Arrays.sort(mainArray);
        
        return new String(mainArray);
    }
    public List<Integer> findAnagrams(String s, String p) {
        
        List<Integer> ans = new ArrayList<>();
        if(s.length() == 0){
            return ans;
        }
        
       
        String check2 = sortString(p);
        int len = p.length();
        int endIndex = 0;
       
        String str = "";
        for(int i =0; i<s.length(); i++){
            
            endIndex = i + len ;
            if(endIndex > s.length()){
                break; 
            }
            else{
                str = s.substring(i, endIndex);
                String check1 = sortString(str);
                if(check1.equals(check2)){
                    ans.add(i);
                }
            }
        }
        
        return ans;
    }
}

