Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
Example 3:

Input: root = []
Output: 0
Example 4:

Input: root = [0]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

Question link: https://leetcode.com/problems/maximum-depth-of-binary-tree/
--------------------------------------------------------------------------
class Solution {
    public int maxDepth(TreeNode root) {
        
        if(root == null){
            return 0;
        }
        
        List<List<Integer>> levelWiseList = new ArrayList<>();
        List<Integer> values = new ArrayList<>();
        
        Queue<TreeNode> q = new LinkedList<>();
    
        int level = 0;
        
        q.add(root);
        q.add(null);
        
        while(!q.isEmpty()){
            
            TreeNode curr = q.poll();
            
            if(curr!= null){
                
                values.add(curr.val);
                if(curr.left!= null){
                    q.add(curr.left);
                }
                if(curr.right!= null){
                    q.add(curr.right);
                }
                
            }
            else{
                
                level++;
                levelWiseList.add(values);
                values.clear();
                
                if(q.isEmpty() == false){
                    q.add(null);
                }
                
            }
            
        }
        
        
        return level;
    } 
    }
    

