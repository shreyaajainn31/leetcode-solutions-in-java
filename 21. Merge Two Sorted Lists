Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.
Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.

Question link: https://leetcode.com/problems/merge-two-sorted-lists/

-------------------------------------------------------------------

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy; 
    
        while(l1 != null && l2 !=null){
            
            if(l1.val <= l2.val){
                ListNode n = new ListNode(l1.val);
                curr.next = n;
                curr = curr.next;
                l1 = l1.next;
            }
            else{
                ListNode n = new ListNode(l2.val);
                curr.next = n;
                curr = curr.next;
                l2 = l2.next;
            }
        }
        if(l2 != null){
            curr.next = l2;
        }
        if(l1!=null){
            curr.next = l1;
        }
        
        return dummy.next;
    }
}
