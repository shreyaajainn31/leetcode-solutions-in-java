You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Question link: https://leetcode.com/problems/add-two-numbers/
=============================================================

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        if(l2 == null){
            return l1;
        }
        if(l1 == null){
            return l2;
        }
        
        
        ListNode dummy = new ListNode(0);
        
        ListNode curr = dummy;
        
        int n1 = 0, n2 = 0, carry = 0, sum = 0;
        
        while(l1 != null && l2 != null){
          
            sum+=carry;
            if(l1!=null){
                sum+=l1.val;
            }
            
            if(l2!=null){
                sum+=l2.val;
            }
            
            
            
            carry = sum/10;
            
            ListNode digit = new ListNode(sum % 10);
            
            curr.next = digit;
            curr = curr.next;
            sum = 0;
            l1 = l1.next;
            l2 = l2.next;
            
           
        }
        
        if(l1!=null){ 
            
            while(l1!=null){
               
            sum+=carry;
            sum +=l1.val;
            carry = sum/10;
            ListNode digit = new ListNode(sum%10);
            curr.next = digit;
            curr = curr.next;
            l1 = l1.next;
            sum = 0;
            }
        }
        if(l2!=null){ 
            
            while(l2!=null){
               
            sum+=carry;
            sum +=l2.val;
            carry = sum/10;
            ListNode digit = new ListNode(sum%10);
            curr.next = digit;
            curr = curr.next;
            l2 = l2.next;
            sum = 0;
            }
        }
        if(carry == 1){
            sum+=carry;
            ListNode digit = new ListNode(sum%10);
            curr.next = digit;
            curr = curr.next;
        }
        return dummy.next;
        
    }
}
