You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".
Example 2:

Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

Constraints:

1 <= logs.length <= 100
3 <= logs[i].length <= 100
All the tokens of logs[i] are separated by a single space.
logs[i] is guaranteed to have an identifier and at least one word after the identifier.

Question link: https://leetcode.com/problems/reorder-data-in-log-files/
======================================================================

class Solution {
      
    public class compares implements Comparator<String>{
        
        @Override
        public int compare(String log1, String log2){
          
            String[] s1,s2;
            String str1 =  "", str2 ="", f1 ="",f2 ="";
            if(log1!=null){
                s1 =log1.split(" ", 2);
                str1 = s1[1];
                f1 = s1[0];
            }
            if(log2!=null){
                s2 = log2.split(" ",2);
                str2 = s2[1];
                f2 = s2[0];
            }
            
            if(str1.equals(str2)){
                 return f1.compareTo(f2);
                
            }
            else{
               return str1.compareTo(str2);
            }
        }
    }
    public String[] reorderLogFiles(String[] logs) {
     
        String [] digits = new String[logs.length];
        String[] log = new String[logs.length];
        String [] ans = new String[logs.length];
        int ai = 0,di = 0,li = 0;
        for(String str : logs){
            
            String [] charArray = str.split(" ", str.length());
    
            char c  = charArray[1].charAt(0);
            
            if(Character.isAlphabetic(c)){
                
                log[li] = str;
                li++;
            }
            else{
                digits[di] = str;
                di++;
            }
           
        }
     
        Comparator<String> myCompare = new compares();
        Arrays.sort(log, myCompare);
       
        for(String str : log){
            if(str!=null) {
            System.out.println(str);
            ans[ai] = str;
            ai++;
            }
        }
        
        for(String strs : digits){
            if(strs!=null){
                ans[ai] = strs;
                ai++;
            }
            else break;
        }
               
       
        return ans;
        
    }
}
