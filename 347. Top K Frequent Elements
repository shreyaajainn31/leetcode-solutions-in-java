Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

Question link: https://leetcode.com/problems/top-k-frequent-elements/
==================================================================

class Solution {
    
    public int[] topKFrequent(int[] nums, int k) {
    
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        
        for(int num : nums){    
            if(map.containsKey(num)){
                map.put(num, map.get(num) + 1);
            }
            else{
                map.put(num,1);
            }
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>(){
           
            @Override
            public int compare(Integer o1, Integer o2){
                
                int f1 = map.get(o1);
                int f2 = map.get(o2);
                
                if(f1<=f2){
                    return 1;
                }
                else{
                    return -1;
                }
                
            }
            
        });
    
        for(int num : map.keySet()){
            pq.add(num);
        }
        
        int ans[] = new int[k];
        
        int ai = 0;
        
        while(k!=0){
            ans[ai] = pq.poll();
            ai++;
            k--;
        }
        
        return ans;
        
        
    }
}
