/*Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1


Question link: https://leetcode.com/problems/majority-element/
*/

----------------------------------------------------------------------

Code:

class Solution {
    public int majorityElement(int[] nums) {
     
        int len = nums.length;
        int majority = len/2;
        
        int ans = 0;
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        
        for(int i = 0; i<len; i++){
            
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i]) + 1);
            }
            else{
                map.put(nums[i],1);
            }
        }
        
        for(int i : map.keySet()){
          
            
            if(map.get(i) > majority){
                ans = i;
                break;
            }
        }
        return ans;
        
    }
}

