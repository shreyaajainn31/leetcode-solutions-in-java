We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)
Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:
1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000
Question link: https://leetcode.com/problems/k-closest-points-to-origin/
===============================================================================

class Solution {
    public int[][] kClosest(int[][] points, int K) {
        
        int[][] ans = new int[K][2];
        HashMap<Integer,Integer>map = new HashMap<Integer,Integer>();
        int [] distArray = new int[points.length];
        int di = 0;
        int x = 0, y = 0, dist = 0;
        for(int i = 0; i<points.length;i++){
            
            x = Math.abs(points[i][0]);
            y = Math.abs(points[i][1]);
            dist = x * x + y * y;
            map.put(i, dist);
        }
      
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>(){
           
            @Override
            public int compare(Integer o1, Integer o2){
                double dist1 = Math.sqrt(map.get(o1));
                double dist2 = Math.sqrt(map.get(o2));
                
                if(dist1>=dist2){
                    return 1;
                }
                else{
                    return -1;
                }
            }
        });
            
        for(int num : map.keySet()){
            pq.add(num);
        }
        
        int ansIndex = 0;
        int ai = 0;  
        while(K!=0){
            
            ansIndex = pq.peek();
            ans[ai] = points[ansIndex];
            ai++;
            K--;
            pq.remove();
        }
        
        return ans;    
    }
}
