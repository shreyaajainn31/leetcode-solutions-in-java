Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


Question link: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

----------------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        
        
        List<List<Integer>> ans = new ArrayList<>();       
        

        Queue<TreeNode> q = new LinkedList();
        
        if(root == null){
            return ans;
        }
        
        q.add(root);
        q.add(null);
        int level = 0;
        List<Integer> values = new ArrayList<>();
        while(!q.isEmpty()){
            
            TreeNode curr = q.poll();
            if(curr!= null)
            {
                values.add(curr.val);
                if(curr.left!= null){
                    q.add(curr.left);
                }

                if(curr.right!= null){
                    q.add(curr.right);
                }
            }
            else{
                ans.add(values);
                values = new ArrayList();
                if(q.isEmpty() == false){
                    q.add(null);
                }
            
            }
            
        }
        
        Collections.reverse(ans);
        return ans;
    }
}
