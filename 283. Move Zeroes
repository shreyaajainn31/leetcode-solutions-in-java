/*
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

Question link: https://leetcode.com/problems/move-zeroes/

*/


----------------------------------------------------------------------

Code ---> O(n) Space

class Solution {
    
    public void moveZeroes(int[] nums) {
        
        
       if(nums.length == 0){
           return;
       }

        
        int ans[] = new int[nums.length];
        
        int j = 0;
        for(int i = 0; i<nums.length; i++){
            if(nums[i] != 0){
                ans[j] = nums[i];
                j++;
            }
        }
        
       
        
        for(int i =0; i<nums.length; i++){
            if(nums[i] == 0){
                ans[j] = 0;
                j++;
            }
        }
        
        for(int i = 0; i<ans.length; i++){
            
            nums[i] = ans[i];
        }
        
       }
                
    }
    
  ----------------------------------------------------------
  
  
  Code ---> O(1) Space
  
  
  class Solution {
    
    public void moveZeroes(int[] nums) {
        
        
       if(nums.length == 0){
           return;
       }

        int count = 0;
        int j = 0;
        for(int i = 0; i<nums.length; i++){
            if(nums[i] != 0){
                nums[j] = nums[i];
                j++;
            }else{
                count++;
            }
        }
       
        for(int i = 0;i<count; i++){
            nums[j] = 0;
            j++;
        }
        
       }
                
    }

